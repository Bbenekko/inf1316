Bento Bruno Contarini Gonçalves  -  2311122
Mayara Ramos Damazio - 2210833

Questão 1) Abra duas seções de terminais
* Na primeira, execute um programa que fica em
loop lendo de uma FIFO para depois escrever na
saída padrão (tela)
* Na segunda, execute um programa que fica lendo
da entrada padrão (teclado) e depois escreve na
mesma FIFO
-----------------------------------------------------
ARQUIVO ex1_in.c

#include <stdlib.h>
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#define OPENMODE (O_WRONLY | O_NONBLOCK)
#define FIFO "minhaFifo"


int main (void)
{
    int fpFIFO;
    char mensagem[1000];
    if (access(FIFO, F_OK) == -1)
    {
        if (mkfifo (FIFO, S_IRUSR | S_IWUSR) != 0)
        {
            fprintf (stderr, "Erro ao criar FIFO %s\n", FIFO);
            return -1;
        }
    }
    puts ("Abrindo FIFO");
    if ((fpFIFO = open (FIFO, OPENMODE)) < 0)
    {
        fprintf (stderr, "Erro ao abrir a FIFO %s\n", FIFO);
        return -2;
    }
    puts ("Insira mensagem para a FIFO:");
    fgets(mensagem, sizeof mensagem, stdin);
    write(fpFIFO, mensagem, strlen(mensagem));
    puts ("Fim da escrita");
    close (fpFIFO);
    return 0;
}
----------------------------------------------------
ARQUIVO ex1_out.c 

#include <stdlib.h>
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#define OPENMODE (O_RDONLY)
//#define OPENMODE (O_RDONLY | O_NONBLOCK)
#define FIFO "minhaFifo"
#define EVER ;;

int main (void)
{
    int fpFIFO;
    char ch;
    if (access(FIFO, F_OK) == -1)
    {
        if (mkfifo (FIFO, S_IRUSR | S_IWUSR) != 0)
        {
            fprintf (stderr, "Erro ao criar FIFO %s\n", FIFO);
            return -1;
        }
    }
    puts ("Abrindo FIFO");
    if ((fpFIFO = open (FIFO, OPENMODE)) < 0)
    {
        fprintf (stderr, "Erro ao abrir a FIFO %s\n", FIFO);
        return -2;
    }
    puts ("Aguardando leitura!");
    while (read (fpFIFO, &ch, sizeof(ch)) > 0) putchar (ch);
    puts ("\nFim da leitura");
    close (fpFIFO);
    unlink(FIFO);
    return 0;
}

-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO parte 1 (primeira janela)
$gcc -Wall -o ex1_out ex1_out.c
$./ex1_out
-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO parte 1 (segunda janela)
$gcc -Wall -o ex1_in ex1_in.c
$./ex1_in
-----------------------------------------------------
RESULTADO
(Segunda janela, do ex1_in)
Abrindo FIFO
Insira mensagem para a FIFO:
$Mensagem muito bacana!!
Fim da escrita

(Primeira janela, do ex1_out)
Abrindo FIFO
Aguardando leitura!
Mensagem muito bacana!!

Fim da leitura
-----------------------------------------------------
CONCLUSÃO

Os programas utilizaram como exemplos os códigos dados em sala de aula. Para a execução
sem problemas do programa, é necessário executar primeiro o "ex1_out" e depois o "ex1_in",
em terminais diferentes! O programa "ex1_out" abre uma FIFO para leitura, e aguarda 
haver algum conteúdo na FIFO, para assim printar o conteúdo e fecha-la. Já a "ex1_in", abre 
a FIFO para entrada, e espera o uma entrada do terminal para mandar para a FIFO.

-----------------------------------------------------

Questão 2) Faça um programa para redirecionar a entrada e
a saída, lendo os dados de um arquivo e gerando
a saída em outro.
-----------------------------------------------------
ARQUIVO ex2.c

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main ()
{
    int fdIn, fdOut;
    int retorno; /* valor de retorno de dup */
    int retorno2; 

    if ((fdIn=open("arquivoEnt.txt", O_RDONLY,0666)) == -1)
    {
        perror("Error open()");
        return -1;
    }
    close(0);
    dup(fdIn);

    if ((fdOut=open("arquivoSaida.txt", O_RDWR|O_CREAT|O_TRUNC,0666)) == -1)
    {
        perror("Error open()");
        return -1;
    }
    close(1);
    dup(fdOut);

    char conteudo[1000];
    fgets(conteudo, sizeof conteudo, stdin);
    printf("Conteudo do arquivoEnt: %s", conteudo);
    
    return 0;
}

----------------------------------------------------
ARQUIVO arquivoEnt.txt
Mensagem muito legal!

-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO
$gcc -Wall -o ex2 ex2.c
$./ex2 &

-----------------------------------------------------
RESULTADO

(Dentro de arquivoSaida.txt):
Conteudo do arquivoEnt: Mensagem muito legal!

-----------------------------------------------------

CONCLUSÃO

No código foram fechadas a entrada e saída padrão, e foram abertas no lugar a fdIn e fdOut, 
que direcionam a entrada padrão para o arquivoEnt.txt e a saída padrão arquivoSaida.txt.
Logo com fgets é possível ler o arquivoEnt e com printf é possível escrever no arquivoSaida.

-----------------------------------------------------

Questão 3) Escreva um servidor e um cliente usando duas
FIFOs: uma para enviar strings para o servidor,
e outra para transmitir as respostas de volta
para os clientes. O servidor deverá rodar em
background e transformar cada palavra
recebida de minusculas para maiúsculas.
Obs: execute os seus clientes em terminais diferentes.

-----------------------------------------------------
ARQUIVO ex3_client.c

#include <stdlib.h>
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#define FIFO_SERVER_IN "serverFifoIn"
#define FIFO_SERVER_OUT "serverFifoOut"

int inFIFO, outFIFO;

int main (void)
{
    char ch;
    if (access(FIFO_SERVER_IN, F_OK) == -1)
    {
        if (mkfifo (FIFO_SERVER_IN, S_IRUSR | S_IWUSR) != 0)
        {
            fprintf (stderr, "Erro ao criar FIFO %s\n", FIFO_SERVER_IN);
            return -1;
        }
    }
    puts ("Abrindo FIFO de entrada do cliente!");
    if ((inFIFO = open (FIFO_SERVER_IN, O_WRONLY)) < 0)
    {
        fprintf (stderr, "Erro ao abrir a FIFO %s\n", FIFO_SERVER_IN);
        return -2;
    }

    if (access(FIFO_SERVER_OUT, F_OK) == -1)
    {
        if (mkfifo (FIFO_SERVER_OUT, S_IRUSR | S_IWUSR) != 0)
        {
            fprintf (stderr, "Erro ao criar FIFO %s\n", FIFO_SERVER_OUT);
            return -1;
        }
    }
    puts ("Abrindo FIFO de entrada do cliente!");
    if ((outFIFO = open (FIFO_SERVER_OUT, O_RDONLY)) < 0)
    {
        fprintf (stderr, "Erro ao abrir a FIFO %s\n", FIFO_SERVER_OUT);
        return -2;
    }

    for(;;)
    {
        char mensagem[1000];
        puts ("Aguardando entrada!");
        fgets(mensagem, sizeof mensagem, stdin);
        puts ("Fim da entrada!");
        
        write(inFIFO, mensagem, strlen(mensagem));
        puts ("Aguardando leitura!");
        while (read (outFIFO, &ch, sizeof(ch)) == 1 && ch != '\n') putchar (ch);
        putchar('\n');
        puts ("Fim da leitura");
    }



    return 0;   
}
-----------------------------------------------------
ARQUIVO ex3_server.c 

#include <stdlib.h>
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#define FIFO_SERVER_IN "serverFifoIn"
#define FIFO_SERVER_OUT "serverFifoOut"

int inFIFO, outFIFO;

int main (void)
{
    char ch;
    char mensagem[1000];
    if (access(FIFO_SERVER_IN, F_OK) == -1)
    {
        if (mkfifo (FIFO_SERVER_IN, S_IRUSR | S_IWUSR) != 0)
        {
            fprintf (stderr, "Erro ao criar FIFO %s\n", FIFO_SERVER_IN);
            return -1;
        }
    }
    puts ("Abrindo FIFO de entrada do servidor!");
    if ((inFIFO = open (FIFO_SERVER_IN, O_RDONLY)) < 0)
    {
        fprintf (stderr, "Erro ao abrir a FIFO %s\n", FIFO_SERVER_IN);
        return -2;
    }

    if (access(FIFO_SERVER_OUT, F_OK) == -1)
    {
        if (mkfifo (FIFO_SERVER_OUT, S_IRUSR | S_IWUSR) != 0)
        {
            fprintf (stderr, "Erro ao criar FIFO %s\n", FIFO_SERVER_OUT);
            return -1;
        }
    }
    puts ("Abrindo FIFO de entrada do servidor!");
    if ((outFIFO = open (FIFO_SERVER_OUT, O_WRONLY)) < 0)
    {   
        fprintf (stderr, "Erro ao abrir a FIFO %s\n", FIFO_SERVER_OUT);
        return -2;
    }

    for(;;)
    {
        int n = 0;
        puts ("Aguardando leitura!");
        while (n < (int)sizeof(mensagem)-1 && read (inFIFO, &ch, sizeof(ch)) > 0 && ch != '\n') 
        {
            mensagem[n] = ch;
            n++;
        }
        mensagem[n] = '\0';
        printf("Mensagem recebida: %s\n", mensagem);
        for(int i = 0; i < strlen(mensagem); i++)
        {
            if (mensagem[i] >= 'a' && mensagem[i] <= 'z') mensagem[i] = mensagem[i] - 32;
        }
        write(outFIFO, mensagem, n);
        write(outFIFO, "\n", 1);
    }



    return 0;
}
-----------------------------------------------------
COMPILAÇÃO
$gcc -Wall -o ex3_client ex3_client.c
$gcc -Wall -o ex3_server ex3_server.c

-----------------------------------------------------
EXECUÇÃO e RESULTADO (terminal 1)

$./ex3_server &
[1] 13952
Abrindo FIFO de entrada do servidor!

$./ex3_client
Abrindo FIFO de entrada do cliente!
Abrindo FIFO de entrada do cliente!
Abrindo FIFO de entrada do servidor!
Aguardando leitura!
Aguardando entrada!
cliente1
Fim da entrada!
Aguardando leitura!
Mensagem recebida: cliente1
Aguardando leitura!
CLIENTE1
Fim da leitura
Aguardando entrada!
Mensagem recebida: cliente2
Aguardando leitura!

-----------------------------------------------------
EXECUÇÃO e RESULTADO (terminal 2)
$./ex3_client 
Abrindo FIFO de entrada do cliente!
Abrindo FIFO de entrada do cliente!
Aguardando entrada!
cliente2
Fim da entrada!
Aguardando leitura!
CLIENTE2
Fim da leitura
Aguardando entrada!

-----------------------------------------------------

CONCLUSÃO 


Os programas funcionam, porém as FIFOs criadas não são fechadas com o fechamento do programa (através
da tecla Ctrl+c), o que seria um pequeno defeito, porém não afeta aperformance e demandou muito tempo,
logo não foi possível resolve-lo. O código do ex3_server.c abre as duas FIFOs (entrada e saída do servidor)
e através de um loop infinito, fica verificando se recebeu alguma coisa na FIFO de entrada (serverFifoIn) (com o divisor
de mensagens sendo a '\n'). Após receber algo na FIFO, é realizada uma simples operação nos caracteres de letras para
torna-las maiusculas, e depois é enviado a string pela FIFO de saída (serverFifoOut).
Já a ex3_client.c fica aguardando um input (teclado), e o envia para a FIFO de entrada (serverFifoIn), e fica aguardando
a FIFO de saída (serverFifoOut) para printar no terminal o resultado enviado pelo servidor.
