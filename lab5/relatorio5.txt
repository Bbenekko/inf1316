Bento Bruno Contarini Gonçalves  -  2311122
Mayara Ramos Damazio - 2210833

Questão 1) Faça um programa para criar dois processos que se comunicam via pipe. 
O Pai lê do pipe enquanto o filho escreve no pipe. Exiba o resultado do que foi 
escrito e lido.
-----------------------------------------------------
ARQUIVO ex1.c

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h> 

#define TAM_VETOR 100   

int main(void)
{
    int fd[2]; /* descritor a ser duplicado */
    int qtdLidos = 0;
    int qtdEnviados = 0;
    int id;

    if (pipe(fd) < 0)
    {
        puts ("Erro ao abrir os pipes");
        exit (-1);
    }

    id = fork();
    if(id == 0) //filho
    {
        close(fd[0]); //tem que fechar leitura
        char frase[TAM_VETOR] = "Ola pai! Aqui e o seu filho. Meu pid e ";
        char idStr [10];
        sprintf(idStr, "%d", getpid());
        strcat(frase, idStr);
        qtdEnviados = write(fd[1], frase, strlen(frase) + 1);
        printf("%d dados enviados\n", qtdEnviados);
        close(fd[1]);
    }
    else if (id > 0)
    {
        close(fd[1]); //tem que fechar escrita
        char frase[TAM_VETOR];

        qtdLidos = read(fd[0], frase, TAM_VETOR);
        printf("%d dados lidos: %s\n", qtdLidos, frase);
        printf("\nAqui e o pai e o pid do filho era %d\n", id);
        close(fd[0]);
    }
    else
    {
        puts ("Erro na criação do novo processo\n");
        exit (-2);
    }

    
    return 0;
}  

-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO
$gcc -Wall -o ex1 ex1.c
$./ex1
-----------------------------------------------------
RESULTADO

47 dados enviados
47 dados lidos: Ola pai! Aqui e o seu filho. Meu pid e 1346261

Aqui e o pai e o pid do filho era 1346261

-----------------------------------------------------
CONCLUSÃO

No programa pai, é criado um vetor de duas posições fd e nele são guardados os descritores 
de leitura e escrita respectivamente. Após isso, é feito o fork e um processo filho é criado. 
Na parte que apenas o processo filho roda, é fechada a comunicação de leitura com a função 
close e é enviado um dado, nesse caso uma string com tamanho de 47, pelo comando write pela
comunicação de pipe na segunda posição do vetor fd. No pai, é fechada a comunicação de saída
e é usado o comando read para ler o dado presente na pipe e colocar em alguma variável, um 
vetor de string no caso específico e depois a string foi printada. Foi necessário se atentar
à quantidade de bytes que se quer escrever ou ler nos comandos read ou write. Também se 
observa que, no write, foi usado o strlen(str) + 1 para dizer o quanto de bytes da capacidade
total da string que deveria ser enviada e, no read, por mais que ele pudesse ler até 100,
o read leu exatamente a quantidade de bytes que a string passada tem.

-----------------------------------------------------

Questão 2) 
Tente fazer um programa para interceptar o
sinal SIGKILL. Você conseguiu? Explique.
-----------------------------------------------------
ARQUIVO ex2.c

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>

#define EVER ;;

void intHandler(int sinal);
void quitHandler(int sinal);

int main (void)
{
    void (*p)(int); // ponteiro para função que recebe int como
    // parâmetro
    p = signal(SIGKILL, intHandler);
    printf("Programa rodando!\n");
    for(EVER);
}

void intHandler(int sinal)
{
    printf("Você tentou dar SIGKILL!");
}

-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO PARTE 1
$gcc -Wall -o ex2 ex2.c
$./ex2 &

-----------------------------------------------------
RESULTADO

Programa rodando!
$ps 
$kill -s 9 8422
[1]+    Killed             ./ex2

-----------------------------------------------------

CONCLUSÃO

Não foi possível interceptar o sinal SIGKILL, mesmo que no código houvesse a função signal()
com um inthandler, para alterar o sinal para um sinal "inofensivo". Foi explicado em aula
que o sinal kill não pode ser interceptado.

-----------------------------------------------------

Questão 3) Busca paralela em vetor
Faça um programa paralelo (com pelo menos 4 processos) para localizar 
uma chave em um vetor.

Crie uma memória compartilhada com dados numéricos inteiros e desordenados e a divida
pelo número de processos;

Cada processo deve procurar o dado na sua área de memória e informar a posição onde o
dado foi localizado. 
-----------------------------------------------------
ARQUIVO filhocidio.c

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

void childhandler(int signo);
int delay;
int main (int argc, char *argv[])
{
    pid_t pid;
    signal(SIGCHLD, childhandler);
    if ((pid = fork()) < 0)
    {
        fprintf(stderr, "Erro ao criar filho\n");
        exit(-1);
    }
    if (pid == 0) /* child */
        execve(argv[2], 0, 0); /* ou sleep(3);*/
    else /* parent */
    {
        sscanf(argv[1], "%d", &delay); /* read delay from command line */
        sleep(delay);
        printf("Program %s exceeded limit of %d seconds!\n", argv[2], delay);
        kill(pid, SIGKILL);
        sleep(1); /* necessary for SIGCHLD to arrive */
    }
    return 0;
}

void childhandler(int signo) /* Executed if child dies before parent */
{
    int status;
    pid_t pid = wait(&status);
    printf("Child %d terminated within %d seconds com estado %d.\n", pid, delay, status);
    exit(0);
}


ARQUIVO sleep5.c

#include <stdio.h>
#include <unistd.h>
int main (void)
{
    fprintf(stdout, "indo dormir...\n");
    sleep(5);
    printf(stdout, "Acordei!\n");
    return 0;
}


ARQUIVO sleep15.c

#include <stdio.h>
#include <unistd.h>
int main (void)
{
    fprintf(stdout, "indo dormir...\n");
    sleep(5);
    printf(stdout, "Acordei!\n");
    return 0;
}
-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO
$gcc -Wall -o sleep5 sleep5.c
$gcc -Wall -o sleep15 sleep15.c
$gcc -Wall -o filhocidio filhocidio.c
$./filhocidio 10 ./sleep5
$./filhocidio 10 ./sleep15
-----------------------------------------------------

RESULTADO

indo dormir...
Acordei!
Child 8296 terminated within 10 seconds com estado 0.

----

indo dormir...
Program ./sleep15 exceeded limit of 10 seconds!
Child 8360 terminated within 10 seconds com estado 9.
-----------------------------------------------------

CONCLUSÃO 

Tanto os programas sleep5 e sleep 15 funcionam de forma semelhante: Assim que começam a rodar, 
printam uma mensagem, são pausados por uma determinada quantidade de segundos e printam mais  uma mensagem. 

O filhocidio inicia utilizando a função signal que cadastra uma reação ao recebimento do sinal do tipo SIGCHLD
que é emitido quando há a pausa, continuidade ou a morte de um filho antes do pai. A reação criada foi a função
childhandler que é chamada quando há o recebimento desse sinal. Nela, o pai recebe o status do processo pelo wait
e printa as informações do processo fiho. 

Voltando ao código, é criado um filho no fork. Foram usados 2 programas filhos: sleep5 e sleep 15 em que cada um
printa uma mensagem, "dorme" por 5 e 15 segundos respectivamente e depois printam outra mensagem.  

Enquanto o filho roda, o pai "dorme" por uma quantidade de segundos determinada por um parâmetro passado pela linha
de comando. Se o programa filho, que até então estava rodando em paralelo, não morrer antes que a "soneca" do pai
termine, ele printa a quantidade de tempo até então e mata o filho com o comando kill, e depois "dorme" novamente
apenas para que o sinal da morte do filho chegue e a função childhandler seja acionada, sendo que nesse print, o 
status do filho foi que ele terminou com código 9. Se o filho terminar antes do fim da "soneca" do pai, os dois prints
do filho são mostrados na tela e a childhandler é acionada, mostrando que o filho terminou com código 0 e o pai é encerrado.

-----------------------------------------------------

Questão 4) Usando SIGSTOP e SIGCONT faça um
programa que crie 2 processos filho e alterne a
execução dos filhos. Após 10 trocas de
contexto, o processo pai mata os processos
filho.
OBS: Os processos filho são formados por loops
infinitos.
-----------------------------------------------------
ARQUIVO ex4.c

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

#define EVER ;;

int main()
{
    int pid1, pid2;

    printf("pid do pai = %d\n", getpid());  
    if((pid1 = fork()) == 0) // filho 1
    {
        for(EVER)
        {
            printf("Filho 1 executando!\n");
            sleep(1);
        }
    }

    printf("pid do pai = %d\n", getpid());
    if((pid2 = fork()) == 0) // filho 2
    {
        for(EVER)
        {
            printf("Filho 2 executando!\n");
            sleep(1);
        }
    }

    for (int i = 1; i < 11; i++)
    {
        if(i%2) // se i for impar 
        {
            kill(pid1, SIGSTOP);
            kill(pid2, SIGCONT);
        }
        else // se i for par
        {
            kill(pid2, SIGSTOP);
            kill(pid1, SIGCONT);
        }
        sleep(2);
    }

    printf("Terminou!");
    kill(pid1, SIGKILL);
    kill(pid2, SIGKILL);


    return 0;
}

-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO
$gcc -Wall -o ex4 ex4.c
$./ex4

-----------------------------------------------------
RESULTADO

pid do pai = 8622
pid do pai = 8622
Filho 1 executando!
Filho 2 executando!
Filho 2 executando!
Filho 2 executando!
Filho 1 executando!
Filho 1 executando!
Filho 2 executando!
Filho 2 executando!
Filho 1 executando!
Filho 1 executando!
Filho 2 executando!
Filho 2 executando!
Filho 1 executando!
Filho 1 executando!
Filho 2 executando!
Filho 2 executando!
Filho 1 executando!
Filho 1 executando!
Filho 2 executando!
Filho 2 executando!
Filho 1 executando!
Filho 1 executando!
Terminou!

-----------------------------------------------------
CONCLUSÃO

Para realizar a tarefa, foram realizados dois forks (com variáveis pid1 e pid2, para o primeiro
e segundo filho respectivamente), nos quais os mesmos estão em um loop infinito, que apenas printa
que está em execução, e pausa (sleep) por um segundo. 
No processo pai, há um loop de um for, que caso seja impar para o filho 1 e continua o filho 2,
e caso seja par faz o contrário. Ambos são realizados com os sinais SIGSTOP e SIGCONT. 
APós isso há um sleep de 2 segundos Como é possível observar, no output as vezes há mais ou menos 
prints por filho, isso se dá por uma falta de sincronia entre o sleep do pai e o sleep dos processos 
filhos. No final do programa, os processos filhos são finalizados com SIGKILL.