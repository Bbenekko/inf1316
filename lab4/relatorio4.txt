Bento Bruno Contarini Gonçalves  -  2311122
Mayara Ramos Damazio - 2210833

Questão 5) Faça um programa que leia 2 números e
imprima o resultado das 4 operações básicas
sobre estes 2 números.
l Verifique o que acontece se o 2º. número
da entrada for 0 (zero)
l Capture o sinal de erro de floating point
(SIGFPE) e repita a experiência anterior
-----------------------------------------------------
ARQUIVO ex1.c

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>

#define EVER ;;
void intHandler(int sinal);
void quitHandler(int sinal);

int main (void)
{
void (*p)(int); // ponteiro para função que recebe int como
    // parâmetro
    p = signal(SIGINT, intHandler);
    printf("Endereco do manipulador anterior %p\n", p);
    p = signal(SIGQUIT, quitHandler);
    printf("Endereco do manipulador anterior %p\n", p);
    puts ("Ctrl-C desabilitado. Use Ctrl-\\ para terminar");
    for(EVER);
}
void intHandler(int sinal)
{
    printf("Você pressionou Ctrl-C (%d) \n", sinal);
}
void quitHandler(int sinal)
{
    printf("Terminando o processo...\n");
    exit (0);
}

-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO
$gcc -Wall -o ctrl-c ctrl-c.c
$./ctrl-c
-----------------------------------------------------
RESULTADO 1

Endereco do manipulador anterior (nil)
Endereco do manipulador anterior (nil)
Ctrl-C desabilitado. Use Ctrl-\ para terminar
^CVocê pressionou Ctrl-C (2) 
^CVocê pressionou Ctrl-C (2) 
^CVocê pressionou Ctrl-C (2) 
^\Terminando o processo...

RESULTADO 2

Endereco do manipulador anterior (nil)
Endereco do manipulador anterior (nil)
Ctrl-C desabilitado. Use Ctrl-\ para terminar
^C

-----------------------------------------------------
CONCLUSÃO

No programa original, a função signal foi utilizada duas vezes, de modo que na primeira vez ela captura
o sinal SIGINT que é recebido quando se escrever ctrl-c na shell enquanto roda um programa para interrompê-lo 
e na segunda vez ele captura o sinal SIGQUIT que também interrompre o programa, mas ele gera um core dump. 
Na captura do ctrl-c, ele passa a chamar a função intHandler que printa uma mensagem e na com ctrl-\, ela
printa uma mensagem e dá um exit no programa. Com isso, ao tratar o sinal de ctrl-c, ele já não afeta mais o 
programa, ou seja, ao usar ctrl-c no terminal, o programa já não é mais terminado, mas printa a mensagem da
função intHandler já que ela foi cadastrada como a reação, o que deve ser feito quando esse sinal é recebido. 
Ao usar ctrl-\, o programa é terminado, mas não da forma que normalmente aconteceria: a função quitHandler é 
acionada, o que faz com que, ao terminar o programa com um exit(0), não há criação de um core dump.

Quando se remove os comandos signal(), tanto o ctrl-c, quanto o ctrl-\ encerram o programa do jeito padrão: o 
ctrl-c interrompendo e o ctrl-\ criando o core dump.

-----------------------------------------------------

Questão 6) Faça um programa para monitorar e informar o
preço de chamadas telefônicas. O programa
deverá ser executado em background.
l O início e o término de uma chamada são
informados através dos sinais SIGUSR1 e
SIGUSR2, respectivamente.
l O custo da ligação é de 2 centavos por
segundo, para ligações de até 1 minuto ou de 1
centavo por segundo a partir do 2º. minuto, ou
seja, uma ligação de 1m30s custa R$1,50.
-----------------------------------------------------
ARQUIVO ex6.c 

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <time.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

clock_t inicio, final;
short ligacaoTerminada = 0;

void inicioHandler(int sinal)
{
    printf("Ligação iniciada!\n");
    inicio = clock();
}

void terminoHandler(int sinal)
{
    printf("Ligação terminada!\n");
    final = clock();
    ligacaoTerminada = 1;
}

int main(void)
{
    int tempo;
    float valor = 0;

    void (*p)(int);

    p = signal(SIGUSR1, inicioHandler);

    p = signal(SIGUSR2, terminoHandler);

    while(ligacaoTerminada == 0);

    tempo = ((int) (final - inicio)) / CLOCKS_PER_SEC;
    if (tempo <= 60)
    {
        valor = tempo * 0.02;
    }
    else
    {
        valor = 1.2 + ((tempo-60)* 0.01);
    }
    
    printf("Ligação de %d minutos e %d segundos!\nCusto da ligação: R$%0.2f\n", tempo/60, tempo%60, valor);

    return 0;
}
-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO
$gcc -Wall -o ex6 ex6.c
$./ex6 &

-----------------------------------------------------
RESULTADO 1 (espera de 1 minuto e 23 segundos)

[1] 13657
$kill -s SIGUSR1 13657
Ligação iniciada!
$kill -s SIGUSR2 13657
Ligação terminada!
Ligação de 1 minutos e 23 segundos!
Custo da ligação: R$1.43
[1]+  Done                    ./ex6
-----------------------------------------------------
RESULTADO 2 (espera de 3 segundos)

[1] 13788
$kill -s SIGUSR1 13788
Ligação iniciada!
$kill -s SIGUSR2 13788
Ligação terminada!
Ligação de 0 minutos e 3 segundos!
Custo da ligação: R$0.06
[1]+  Done                    ./ex6
-----------------------------------------------------
CONCLUSÃO

Para fazer o programa foram estabelecidas 3 variáveis globais: inicio, final e ligacaoTerminada(flag). 
Inicio e final são utilizadas com a função clock() para contar o tempo das ligações. Além disso foram criados dois
handles: inicioHandler e finalHandler. O primeiro printa que a ligação iniciou e começa a contagem de tempo
e o segundo printa que terminou a ligação, finaliza a contagem de tempo e iguala a 1 a flag de ligacaoTerminada.
A função main chama a função signal() para os sinais "SIGUSR1" e "SIGUSR2", para trata-los com os inicioHandler()
e finalHandler(). No final há um loop de while() que continua enquanto a flag ligacaoTerminada for 0 (ou seja o código só continua
quando a ligação for terminada). Após isso, há uma pequena equação para encontrar os segundos que duraram a ligação e há
um if que verifica se foi feita por mais de 1 minuto (assim mudando a cobrança). No final é printado o resultado e o programa
retorna 0.
O programa ocorreu como o esperado!

-----------------------------------------------------

Questão 7) Elabore três programas I/O bound que não
terminem (loop de msgs no vídeo).
lElabore um programa que seja capaz de
executar os 3 programas indicados anteriormente
e que simule o compartilhamento da CPU entre os
3 processos com escalonamento Round-Robin
com uma fatia de tempo de 1 segundo para o
primeiro processo e de 2 segundos para os
demais processos. Execute os programas e relate
o que aconteceu
-----------------------------------------------------
ARQUIVO filhocidio.c

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

void childhandler(int signo);
int delay;
int main (int argc, char *argv[])
{
    pid_t pid;
    signal(SIGCHLD, childhandler);
    if ((pid = fork()) < 0)
    {
        fprintf(stderr, "Erro ao criar filho\n");
        exit(-1);
    }
    if (pid == 0) /* child */
        execve(argv[2], 0, 0); /* ou sleep(3);*/
    else /* parent */
    {
        sscanf(argv[1], "%d", &delay); /* read delay from command line */
        sleep(delay);
        printf("Program %s exceeded limit of %d seconds!\n", argv[2], delay);
        kill(pid, SIGKILL);
        sleep(1); /* necessary for SIGCHLD to arrive */
    }
    return 0;
}

void childhandler(int signo) /* Executed if child dies before parent */
{
    int status;
    pid_t pid = wait(&status);
    printf("Child %d terminated within %d seconds com estado %d.\n", pid, delay, status);
    exit(0);
}


ARQUIVO sleep5.c

#include <stdio.h>
#include <unistd.h>
int main (void)
{
    fprintf(stdout, "indo dormir...\n");
    sleep(5);
    printf(stdout, "Acordei!\n");
    return 0;
}


ARQUIVO sleep15.c

#include <stdio.h>
#include <unistd.h>
int main (void)
{
    fprintf(stdout, "indo dormir...\n");
    sleep(5);
    printf(stdout, "Acordei!\n");
    return 0;
}
-----------------------------------------------------

COMPILAÇÃO E EXECUÇÃO
$gcc -Wall -o sleep5 sleep5.c
$gcc -Wall -o sleep15 sleep15.c
$gcc -Wall -o filhocidio filhocidio.c
$./filhocidio 10 ./sleep5
$./filhocidio 10 ./sleep15
-----------------------------------------------------

RESULTADO

indo dormir...
Acordei!
Child 8296 terminated within 10 seconds com estado 0.

----

indo dormir...
Program ./sleep15 exceeded limit of 10 seconds!
Child 8360 terminated within 10 seconds com estado 9.
-----------------------------------------------------

CONCLUSÃO 

Tanto os programas sleep5 e sleep 15 funcionam de forma semelhante: Assim que começam a rodar, 
printam uma mensagem, são pausados por uma determinada quantidade de segundos e printam mais  uma mensagem. 

O filhocidio inicia utilizando a função signal que cadastra uma reação ao recebimento do sinal do tipo SIGCHLD
que é emitido quando há a pausa, continuidade ou a morte de um filho antes do pai. A reação criada foi a função
childhandler que é chamada quando há o recebimento desse sinal. Nela, o pai recebe o status do processo pelo wait
e printa as informações do processo fiho. 

Voltando ao código, é criado um filho no fork. Foram usados 2 programas filhos: sleep5 e sleep 15 em que cada um
printa uma mensagem, "dorme" por 5 e 15 segundos respectivamente e depois printam outra mensagem.  

Enquanto o filho roda, o pai "dorme" por uma quantidade de segundos determinada por um parâmetro passado pela linha
de comando. Se o programa filho, que até então estava rodando em paralelo, não morrer antes que a "soneca" do pai
termine, ele printa a quantidade de tempo até então e mata o filho com o comando kill, e depois "dorme" novamente
apenas para que o sinal da morte do filho chegue e a função childhandler seja acionada, sendo que nesse print, o 
status do filho foi que ele terminou com código 9. Se o filho terminar antes do fim da "soneca" do pai, os dois prints
do filho são mostrados na tela e a childhandler é acionada, mostrando que o filho terminou com código 0 e o pai é encerrado.